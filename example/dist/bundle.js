/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/adj_graph.js":
/*!**************************!*\
  !*** ./lib/adj_graph.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PointEntry = exports.PathEntry = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\r\nclass PathEntry {\r\n    constructor(repeat, ignore = false) {\r\n        // direction will only be computed\r\n        // after all intersections are processed\r\n        this.direction = 0;\r\n        this.loop = -1;\r\n        // the following parameters are used by graph simplifier;\r\n        // only paths that are clockwise around the interior are called boundaries\r\n        this.isBoundary = false;\r\n        this.inSimplified = false;\r\n        this.loopVisited = false;\r\n        this.repeat = repeat;\r\n        this.ignore = ignore;\r\n    }\r\n}\r\nexports.PathEntry = PathEntry;\r\nclass PointEntry {\r\n    constructor(coord) {\r\n        this.conns = new Map();\r\n        // stores connections sorted counter-clockwise\r\n        this.directions = new Array();\r\n        this.coord = coord;\r\n    }\r\n    // assumes all directions are computed\r\n    sortConns() {\r\n        const dirs = Array.from(this.conns.entries());\r\n        dirs.sort((a, b) => b[1].direction - a[1].direction);\r\n        this.directions = dirs.map((path) => path[0]);\r\n    }\r\n    // methods below are low-level\r\n    // they do not attempt to sync the opposite path entry\r\n    addPath(to, repeat, ignore = false) {\r\n        this.conns.set(to, new PathEntry(repeat, ignore));\r\n    }\r\n    // this is used to shorten a path\r\n    // when it is broken by an intermediate point\r\n    shiftPath(from, to) {\r\n        const path = this.conns.get(from);\r\n        this.conns.delete(from);\r\n        this.conns.set(to, path);\r\n        return path;\r\n    }\r\n}\r\nexports.PointEntry = PointEntry;\r\nclass AdjacencyGraph {\r\n    constructor() {\r\n        this.entries = new Array();\r\n        this.pathConnections = new Array();\r\n    }\r\n    // add a point to the graph, potentially a duplicate,\r\n    // potentially breaking an existing path\r\n    addPoint(point) {\r\n        const breakPath = (index, current) => {\r\n            for (const [i, iEntry] of this.entries.entries()) {\r\n                for (const j of iEntry.conns.keys()) {\r\n                    const jEntry = this.entries[j];\r\n                    if ((0, utils_1.contains)([iEntry.coord, jEntry.coord], current.coord)) {\r\n                        current.addPath(i, -iEntry.shiftPath(j, index).repeat);\r\n                        current.addPath(j, -jEntry.shiftPath(i, index).repeat);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        for (const [i, existing] of this.entries.entries()) {\r\n            if ((0, utils_1.equals)(point, existing.coord)) {\r\n                return i;\r\n            }\r\n        }\r\n        const index = this.entries.length;\r\n        const entry = new PointEntry(point);\r\n        breakPath(index, entry);\r\n        this.entries.push(entry);\r\n        return index;\r\n    }\r\n    addEdge(start, end, ignore = false) {\r\n        if (start != end) {\r\n            const winding = ignore ? 0 : 1;\r\n            const intermediates = new Array();\r\n            // first step: find existing points on new edge\r\n            const startEntry = this.entries[start];\r\n            const endEntry = this.entries[end];\r\n            const checked = this.entries.map(() => false);\r\n            for (const [i, existing] of this.entries.entries()) {\r\n                if (i === start ||\r\n                    i === end ||\r\n                    (0, utils_1.contains)([startEntry.coord, endEntry.coord], existing.coord)) {\r\n                    checked[i] = true;\r\n                    intermediates.push({\r\n                        index: i,\r\n                        norm: (0, utils_1.norm)(existing.coord, startEntry.coord),\r\n                    });\r\n                }\r\n            }\r\n            intermediates.sort((a, b) => a.norm - b.norm);\r\n            // second step: find overlaps with existing edge\r\n            const newIntermediates = new Array();\r\n            (0, utils_1.forEachPair)(intermediates.values(), (prev, current) => {\r\n                let prevEntry = this.entries[prev.index];\r\n                const currentEntry = this.entries[current.index];\r\n                if (prevEntry.conns.has(current.index)) {\r\n                    prevEntry.conns.get(current.index).repeat += winding;\r\n                    currentEntry.conns.get(prev.index).repeat -= winding;\r\n                }\r\n                else {\r\n                    newIntermediates.push([\r\n                        { index: prev.index, norm: 0 },\r\n                        {\r\n                            index: current.index,\r\n                            norm: (0, utils_1.norm)(currentEntry.coord, prevEntry.coord),\r\n                        },\r\n                    ]);\r\n                }\r\n            });\r\n            if (newIntermediates.length > 0) {\r\n                const edges = newIntermediates.map((segment) => {\r\n                    const edge = [\r\n                        this.entries[segment[0].index].coord,\r\n                        this.entries[segment[1].index].coord,\r\n                    ];\r\n                    return {\r\n                        edge,\r\n                        box: (0, utils_1.edgeBox)(edge),\r\n                    };\r\n                });\r\n                // third step: find intersections with existing edges\r\n                for (const [i, iChecked] of checked.entries()) {\r\n                    if (!iChecked) {\r\n                        const iEntry = this.entries[i];\r\n                        for (const j of iEntry.conns.keys()) {\r\n                            if (j > i && j < checked.length && !checked[j]) {\r\n                                const jEntry = this.entries[j];\r\n                                const incident = [iEntry.coord, jEntry.coord];\r\n                                const incidentBox = (0, utils_1.edgeBox)(incident);\r\n                                for (const [segIndex, segment] of newIntermediates.entries()) {\r\n                                    const edgeData = edges[segIndex];\r\n                                    if (incidentBox[0].x < edgeData.box[1].x &&\r\n                                        incidentBox[1].x > edgeData.box[0].x &&\r\n                                        incidentBox[0].y < edgeData.box[1].y &&\r\n                                        incidentBox[1].y > edgeData.box[0].y) {\r\n                                        const intersection = (0, utils_1.intersect)(incident, edgeData.edge);\r\n                                        if (intersection !== undefined) {\r\n                                            const index = this.entries.length;\r\n                                            const point = new PointEntry(intersection);\r\n                                            point.addPath(i, -iEntry.shiftPath(j, index).repeat);\r\n                                            point.addPath(j, -jEntry.shiftPath(i, index).repeat);\r\n                                            this.entries.push(point);\r\n                                            segment.push({\r\n                                                index,\r\n                                                norm: (0, utils_1.norm)(intersection, edgeData.edge[0]),\r\n                                            });\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (const intermediates of newIntermediates) {\r\n                    intermediates.sort((a, b) => a.norm - b.norm);\r\n                    (0, utils_1.forEachPair)(intermediates.values(), (prev, current) => {\r\n                        this.entries[prev.index].addPath(current.index, winding, ignore);\r\n                        this.entries[current.index].addPath(prev.index, -winding, ignore);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    addPath(path) {\r\n        const points = path.map((point) => this.addPoint(point));\r\n        if (points.length > 0) {\r\n            this.pathConnections.push(points[points.length - 1]);\r\n        }\r\n        (0, utils_1.forEachPair)(points.values(), (prev, current) => {\r\n            this.addEdge(prev, current);\r\n        }, true);\r\n    }\r\n    // called after all user paths are added to join disjoint sections\r\n    connectPaths() {\r\n        (0, utils_1.forEachPair)(this.pathConnections.values(), (prev, current) => {\r\n            this.addEdge(prev, current, true);\r\n        });\r\n    }\r\n    computeDirections() {\r\n        for (const entry of this.entries.values()) {\r\n            for (const [to, path] of entry.conns.entries()) {\r\n                path.direction = (0, utils_1.direction)([entry.coord, this.entries[to].coord]);\r\n            }\r\n            entry.sortConns();\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = AdjacencyGraph;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/adj_graph.js?");

/***/ }),

/***/ "./lib/earcut.js":
/*!***********************!*\
  !*** ./lib/earcut.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst triangulate_1 = __webpack_require__(/*! ./triangulate */ \"./lib/triangulate.js\");\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\r\nclass DoublyLinkedNode {\r\n    constructor(data) {\r\n        this.prev = -1;\r\n        this.next = -1;\r\n        this.data = data;\r\n    }\r\n}\r\nconst pushSequence = (list, sequence) => {\r\n    const startIndex = list.length;\r\n    for (const [i, data] of sequence.entries()) {\r\n        const node = new DoublyLinkedNode(data);\r\n        if (i > 0) {\r\n            node.prev = startIndex + i - 1;\r\n        }\r\n        if (i < sequence.length - 1) {\r\n            node.next = startIndex + i + 1;\r\n        }\r\n        list.push(node);\r\n    }\r\n    return [startIndex, list.length - 1];\r\n};\r\nconst join = (list, first, second) => {\r\n    list[first].next = second;\r\n    list[second].prev = first;\r\n};\r\nconst remove = (list, node) => {\r\n    join(list, node.prev, node.next);\r\n};\r\nconst moveToBefore = (list, source, dest) => {\r\n    remove(list, list[source]);\r\n    join(list, list[dest].prev, source);\r\n    join(list, source, dest);\r\n};\r\n// this implementation of earcut triangulation is a simplified version of 'github.com/mapbox/earcut'\r\nclass EarcutTriangulator {\r\n    constructor() {\r\n        this.type = triangulate_1.TriangulatorType.loop;\r\n    }\r\n    triangulate(points, loop) {\r\n        const loopNodes = new Array();\r\n        const [start, end] = pushSequence(loopNodes, loop);\r\n        join(loopNodes, end, start);\r\n        const actions = new Array();\r\n        pushSequence(actions, new Array(loop.length).fill(undefined));\r\n        const ACTION_CUT = loop.length;\r\n        const ACTION_NONE = ACTION_CUT + 1;\r\n        pushSequence(actions, new Array(2).fill(undefined));\r\n        join(actions, ACTION_NONE, ACTION_CUT);\r\n        join(actions, ACTION_CUT, start);\r\n        join(actions, end, ACTION_NONE);\r\n        const trigs = new Array();\r\n        while (actions[ACTION_CUT].next !== ACTION_NONE) {\r\n            const node = actions[ACTION_CUT].next;\r\n            if (loopNodes[node].next === node) {\r\n                break;\r\n            }\r\n            else {\r\n                const nodeEntry = loopNodes[node];\r\n                const prevPoint = loopNodes[nodeEntry.prev].data;\r\n                const currentPoint = nodeEntry.data;\r\n                const nextPoint = loopNodes[nodeEntry.next].data;\r\n                const a = (0, utils_1.area)(points[prevPoint], points[currentPoint], points[nextPoint]);\r\n                let cut = false;\r\n                if ((0, utils_1.isZero)(a)) {\r\n                    if ((0, utils_1.dot)(points[prevPoint], points[currentPoint], points[nextPoint]) >\r\n                        0) {\r\n                        // a vertex with overlapping edges: we may need to cut away a trivial triangle\r\n                        // to prevent the process from being stuck at this point.\r\n                        // however, the triangle hitting test below ensures that this will occur\r\n                        // extremely rarely on most natural shapes\r\n                        const pArea = (0, utils_1.area)(points[loopNodes[loopNodes[nodeEntry.prev].prev].data], points[prevPoint], points[currentPoint]);\r\n                        const nArea = (0, utils_1.area)(points[currentPoint], points[nextPoint], points[loopNodes[loopNodes[nodeEntry.next].next].data]);\r\n                        cut = pArea > 0 && nArea > 0;\r\n                    }\r\n                }\r\n                else if (a < 0) {\r\n                    const triangle = [\r\n                        points[prevPoint],\r\n                        points[currentPoint],\r\n                        points[nextPoint],\r\n                    ];\r\n                    const testTriangle = new utils_1.HitTestTriangle(triangle);\r\n                    cut = true;\r\n                    let current = nodeEntry.next;\r\n                    // if code reaches here, remaining loop has at least 3 nodes\r\n                    while (loopNodes[current].next !== nodeEntry.prev) {\r\n                        current = loopNodes[current].next;\r\n                        const point = loopNodes[current].data;\r\n                        if (point !== prevPoint &&\r\n                            point !== currentPoint &&\r\n                            point !== nextPoint &&\r\n                            testTriangle.contains(points[point])) {\r\n                            cut = false;\r\n                        }\r\n                    }\r\n                    if (cut) {\r\n                        trigs.push(triangle);\r\n                        remove(loopNodes, nodeEntry);\r\n                        moveToBefore(actions, nodeEntry.prev, ACTION_NONE); // before `ACTION_NONE` means after `ACTION_CUT`\r\n                        if (nodeEntry.next !== nodeEntry.prev) {\r\n                            moveToBefore(actions, nodeEntry.next, ACTION_NONE); // before `ACTION_NONE` means after `ACTION_CUT`\r\n                        }\r\n                    }\r\n                }\r\n                moveToBefore(actions, node, ACTION_CUT); // before `ACTION_CLEAN` means after `ACTION_NONE`\r\n            }\r\n        }\r\n        return trigs;\r\n    }\r\n}\r\nexports[\"default\"] = EarcutTriangulator;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/earcut.js?");

/***/ }),

/***/ "./lib/graph_simp.js":
/*!***************************!*\
  !*** ./lib/graph_simp.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst denque_1 = __importDefault(__webpack_require__(/*! denque */ \"./node_modules/denque/index.js\"));\r\nconst loop_list_1 = __webpack_require__(/*! ./loop_list */ \"./lib/loop_list.js\");\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\r\nclass NodeVisit {\r\n    constructor(from, hitBoundary) {\r\n        this.from = from;\r\n        this.hitBoundary = hitBoundary;\r\n    }\r\n}\r\nclass GraphSimplifier {\r\n    constructor(loops) {\r\n        this.entries = loops.entries;\r\n        this.loops = loops.loops;\r\n    }\r\n    // if `joinLoops` is set to true, construct a minimum spanning tree\r\n    // connecting all edges with precisely one side of winding number zero;\r\n    // otherwise, simply output such edges without connecting them.\r\n    // adjacent colinear edges will always be joined here\r\n    runSimplifyGraph(joinLoops = true) {\r\n        let startIndex = -1;\r\n        let edgesTotal = 0;\r\n        const conns = new Array();\r\n        const nodeConnections = this.entries.map(() => 0);\r\n        for (const [i, iEntry] of this.entries.entries()) {\r\n            for (const [j, path] of iEntry.conns.entries()) {\r\n                if (this.loops[path.loop].winding === 0) {\r\n                    const opposite = this.entries[j].conns.get(i);\r\n                    if (this.loops[opposite.loop].winding === 0) {\r\n                        if (!path.ignore && i < j) {\r\n                            conns.push([i, j]);\r\n                            nodeConnections[i] += 1;\r\n                            nodeConnections[j] += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (!joinLoops) {\r\n                            opposite.inSimplified = true;\r\n                        }\r\n                        else if (startIndex === -1) {\r\n                            startIndex = i;\r\n                        }\r\n                        opposite.isBoundary = true;\r\n                        edgesTotal += 1;\r\n                        nodeConnections[i] += 1;\r\n                        nodeConnections[j] += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // use auxiliary edges to connect edge loops,\r\n        // so we do not need geometry to decide loop containment\r\n        if (startIndex !== -1) {\r\n            const growth = new Map();\r\n            const visits = new Array();\r\n            const nextVisits = new denque_1.default();\r\n            let edgesFound = 0;\r\n            const visitBoundaryCluster = (i, from, growth, visits, nextVisits) => {\r\n                let count = 0;\r\n                const nexts = new denque_1.default();\r\n                const visit = (i, nexts) => {\r\n                    const node = this.entries[i];\r\n                    for (const [j, path] of node.conns.entries()) {\r\n                        if (path.isBoundary) {\r\n                            if (!path.inSimplified) {\r\n                                path.inSimplified = true;\r\n                                count += 1;\r\n                                nexts.push(j);\r\n                            }\r\n                        }\r\n                        else {\r\n                            const opposite = this.entries[j].conns.get(i);\r\n                            if (opposite.isBoundary && !opposite.inSimplified) {\r\n                                opposite.inSimplified = true;\r\n                                count += 1;\r\n                                nexts.push(j);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                visit(i, nexts);\r\n                if (from !== -1) {\r\n                    visits.push(i);\r\n                }\r\n                nextVisits.push({ node: i, nextDir: 0 });\r\n                if (nexts.length > 0) {\r\n                    growth.set(i, new NodeVisit(from, true));\r\n                    while (nexts.length > 0) {\r\n                        const nextIndex = nexts.shift();\r\n                        if (!growth.has(nextIndex)) {\r\n                            growth.set(nextIndex, new NodeVisit(-1, true));\r\n                            nextVisits.push({ node: nextIndex, nextDir: 0 });\r\n                            visit(nextIndex, nexts);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    growth.set(i, new NodeVisit(from, false));\r\n                }\r\n                return count;\r\n            };\r\n            edgesFound += visitBoundaryCluster(startIndex, -1, growth, visits, nextVisits);\r\n            while (nextVisits.length > 0 && edgesFound < edgesTotal) {\r\n                const nextVisit = nextVisits.peekFront();\r\n                const node = this.entries[nextVisit.node];\r\n                if (nextVisit.nextDir < node.directions.length) {\r\n                    const j = node.directions[nextVisit.nextDir];\r\n                    nextVisit.nextDir += 1;\r\n                    if (!growth.has(j)) {\r\n                        node.conns.get(j).inSimplified = true;\r\n                        this.entries[j].conns.get(nextVisit.node).inSimplified = true;\r\n                        edgesFound += visitBoundaryCluster(j, nextVisit.node, growth, visits, nextVisits);\r\n                    }\r\n                }\r\n                else {\r\n                    nextVisits.shift();\r\n                }\r\n            }\r\n            // remove unnecessary connections that does not lead to a boundary\r\n            for (const visit of visits.reverse()) {\r\n                const node = growth.get(visit);\r\n                if (node.hitBoundary) {\r\n                    growth.get(node.from).hitBoundary = true;\r\n                }\r\n                else {\r\n                    this.entries[node.from].conns.get(visit).inSimplified = false;\r\n                    this.entries[visit].conns.get(node.from).inSimplified = false;\r\n                }\r\n            }\r\n        }\r\n        const loops = new Array();\r\n        const edges = new Array();\r\n        for (const [i, entry] of this.entries.entries()) {\r\n            for (const [j, path] of entry.conns.entries()) {\r\n                if (path.isBoundary && !path.loopVisited) {\r\n                    const loop = (0, loop_list_1.buildLoop)([i, j], this.entries, (path) => path.inSimplified);\r\n                    (0, utils_1.forEachPair)(loop.values(), (prev, current) => {\r\n                        this.entries[prev].conns.get(current).loopVisited = true;\r\n                    }, true);\r\n                    // remove adjacent colinear edges\r\n                    const keepNode = loop.map(() => true);\r\n                    let firstBoundaryEnd = -1;\r\n                    let prevBounaryStart = -1;\r\n                    let prevEntry = this.entries[loop[loop.length - 1]];\r\n                    for (const [i, current] of loop.entries()) {\r\n                        const currentEntry = this.entries[current];\r\n                        const next = loop[(i + 1) % loop.length];\r\n                        const prevPath = prevEntry.conns.get(current);\r\n                        const currentPath = currentEntry.conns.get(next);\r\n                        if (prevPath.isBoundary === currentPath.isBoundary &&\r\n                            nodeConnections[current] === 2 &&\r\n                            (0, utils_1.isZero)((0, utils_1.area)(prevEntry.coord, currentEntry.coord, this.entries[next].coord))) {\r\n                            keepNode[i] = false;\r\n                        }\r\n                        else {\r\n                            if (prevPath.isBoundary) {\r\n                                if (prevBounaryStart === -1) {\r\n                                    firstBoundaryEnd = current;\r\n                                }\r\n                                else {\r\n                                    edges.push([prevBounaryStart, current]);\r\n                                }\r\n                            }\r\n                            if (currentPath.isBoundary) {\r\n                                prevBounaryStart = current;\r\n                            }\r\n                        }\r\n                        prevEntry = currentEntry;\r\n                    }\r\n                    if (prevBounaryStart !== -1 && firstBoundaryEnd !== -1) {\r\n                        edges.push([prevBounaryStart, firstBoundaryEnd]);\r\n                    }\r\n                    loops.push(loop.filter((_, i) => keepNode[i]));\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            loops,\r\n            edges,\r\n            conns,\r\n        };\r\n    }\r\n}\r\nexports[\"default\"] = GraphSimplifier;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/graph_simp.js?");

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports[\"default\"] = void 0;\r\n__exportStar(__webpack_require__(/*! ./triangulate */ \"./lib/triangulate.js\"), exports);\r\nvar triangulate_1 = __webpack_require__(/*! ./triangulate */ \"./lib/triangulate.js\");\r\nObject.defineProperty(exports, \"default\", ({ enumerable: true, get: function () { return __importDefault(triangulate_1).default; } }));\r\n// tsc emits emulated ES-modules by default;\r\n// this snippet makes it a standard commonjs module\r\n// for commonjs and native ESM interop.\r\n// we could do this for every module but\r\n// for now this is only applied to `index.ts`\r\nObject.defineProperties(exports.default, Object.getOwnPropertyDescriptors(exports));\r\nexports = module.exports = exports.default;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/index.js?");

/***/ }),

/***/ "./lib/loop_list.js":
/*!**************************!*\
  !*** ./lib/loop_list.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.buildLoop = exports.LoopNode = void 0;\r\nconst denque_1 = __importDefault(__webpack_require__(/*! denque */ \"./node_modules/denque/index.js\"));\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\r\nclass LoopNode {\r\n    constructor(loop) {\r\n        // winding number will be computed after all loops are built\r\n        this.winding = undefined;\r\n        this.loop = loop;\r\n    }\r\n}\r\nexports.LoopNode = LoopNode;\r\nconst buildLoop = (start, entries, filter = undefined) => {\r\n    const loop = Array.from(start);\r\n    while (true) {\r\n        const current = loop[loop.length - 1];\r\n        const currentEntry = entries[current];\r\n        let index = 0;\r\n        while (index < currentEntry.directions.length &&\r\n            currentEntry.directions[index] !== loop[loop.length - 2]) {\r\n            index += 1;\r\n        }\r\n        index = (index + 1) % currentEntry.directions.length;\r\n        while (filter !== undefined &&\r\n            !filter(currentEntry.conns.get(currentEntry.directions[index]))) {\r\n            index = (index + 1) % currentEntry.directions.length;\r\n        }\r\n        const next = currentEntry.directions[index];\r\n        if (loop[loop.length - 1] === loop[0] && next === loop[1]) {\r\n            loop.pop();\r\n            return loop;\r\n        }\r\n        else {\r\n            loop.push(next);\r\n        }\r\n    }\r\n};\r\nexports.buildLoop = buildLoop;\r\nclass LoopList {\r\n    // assumes that 1) graph is connected, i.e. `adjGraph.connectPaths` has run\r\n    // 2) directions are computed on the graph, i.e. `adjGraph.computeDirections` has run\r\n    constructor(adjGraph) {\r\n        this.loops = [new LoopNode([])]; // placeholder for exterior always exists\r\n        this.entries = adjGraph.entries;\r\n    }\r\n    buildLoops() {\r\n        for (const [i, entry] of this.entries.entries()) {\r\n            for (const [j, path] of entry.conns.entries()) {\r\n                if (path.loop === -1) {\r\n                    const loop = (0, exports.buildLoop)([i, j], this.entries);\r\n                    // test exterior/interior\r\n                    let leftIndices = new Array();\r\n                    let leftNode = -1;\r\n                    let leftCoord = { x: 0, y: 0 };\r\n                    for (const [i, index] of loop.entries()) {\r\n                        if (index == leftNode) {\r\n                            leftIndices.push(i);\r\n                        }\r\n                        else {\r\n                            const entry = this.entries[index];\r\n                            if (leftNode === -1 ||\r\n                                entry.coord.x < leftCoord.x ||\r\n                                (entry.coord.x === leftCoord.x && entry.coord.y < leftCoord.y)) {\r\n                                leftIndices = [i];\r\n                                leftNode = index;\r\n                                leftCoord = entry.coord;\r\n                            }\r\n                        }\r\n                    }\r\n                    let isExterior = false;\r\n                    for (const leftIndex of leftIndices) {\r\n                        const prevIndex = (leftIndex + loop.length - 1) % loop.length;\r\n                        const prevEntry = this.entries[loop[prevIndex]];\r\n                        const nextIndex = (leftIndex + 1) % loop.length;\r\n                        const nextEntry = this.entries[loop[nextIndex]];\r\n                        if (loop[prevIndex] === loop[nextIndex] ||\r\n                            (0, utils_1.area)(prevEntry.coord, leftCoord, nextEntry.coord) > 0) {\r\n                            isExterior = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    const node = new LoopNode(loop);\r\n                    if (isExterior) {\r\n                        this.loops[0] = node;\r\n                    }\r\n                    else {\r\n                        this.loops.push(node);\r\n                    }\r\n                    // mark edges in `adjGraph` as visited\r\n                    const index = isExterior ? 0 : this.loops.length - 1;\r\n                    (0, utils_1.forEachPair)(loop.values(), (prev, current) => {\r\n                        this.entries[prev].conns.get(current).loop = index;\r\n                    }, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    computeWindingNumbers() {\r\n        this.loops[0].winding = 0;\r\n        const nextLoops = new denque_1.default([0]);\r\n        while (nextLoops.length > 0) {\r\n            const index = nextLoops.shift();\r\n            const loop = this.loops[index];\r\n            (0, utils_1.forEachPair)(loop.loop.values(), (prev, current) => {\r\n                const entry = this.entries[current].conns.get(prev);\r\n                if (entry.loop !== -1) {\r\n                    const loopEntry = this.loops[entry.loop];\r\n                    if (loopEntry.winding === undefined) {\r\n                        loopEntry.winding = loop.winding + entry.repeat;\r\n                        nextLoops.push(entry.loop);\r\n                    }\r\n                }\r\n            }, true);\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = LoopList;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/loop_list.js?");

/***/ }),

/***/ "./lib/triangulate.js":
/*!****************************!*\
  !*** ./lib/triangulate.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TriangulatorType = void 0;\r\nconst adj_graph_1 = __importDefault(__webpack_require__(/*! ./adj_graph */ \"./lib/adj_graph.js\"));\r\nconst loop_list_1 = __importDefault(__webpack_require__(/*! ./loop_list */ \"./lib/loop_list.js\"));\r\nconst graph_simp_1 = __importDefault(__webpack_require__(/*! ./graph_simp */ \"./lib/graph_simp.js\"));\r\nconst earcut_1 = __importDefault(__webpack_require__(/*! ./earcut */ \"./lib/earcut.js\"));\r\n// throughout whole implementation we assume the following axes direction:\r\n// positive-x is towards the right, positive-y is towards the bottom.\r\n// also assumed positive winding number means clockwise\r\nvar TriangulatorType;\r\n(function (TriangulatorType) {\r\n    TriangulatorType[TriangulatorType[\"planeGraph\"] = 0] = \"planeGraph\";\r\n    TriangulatorType[TriangulatorType[\"loop\"] = 1] = \"loop\";\r\n})(TriangulatorType = exports.TriangulatorType || (exports.TriangulatorType = {}));\r\nclass PointTranslator {\r\n    constructor(entries) {\r\n        this.points = new Array();\r\n        this.indices = new Map();\r\n        this.entries = entries;\r\n    }\r\n    translate(i) {\r\n        if (!this.indices.has(i)) {\r\n            this.indices.set(i, this.points.length);\r\n            this.points.push(this.entries[i].coord);\r\n        }\r\n        return this.indices.get(i);\r\n    }\r\n}\r\nconst triangulate = (paths, triangulator = new earcut_1.default()) => {\r\n    const graph = new adj_graph_1.default();\r\n    for (const path of paths) {\r\n        graph.addPath(path);\r\n    }\r\n    graph.connectPaths();\r\n    graph.computeDirections();\r\n    const loopList = new loop_list_1.default(graph);\r\n    loopList.buildLoops();\r\n    loopList.computeWindingNumbers();\r\n    const graphSimplifier = new graph_simp_1.default(loopList);\r\n    const result = graphSimplifier.runSimplifyGraph(triangulator.type === TriangulatorType.loop);\r\n    let trigs;\r\n    if (triangulator.type === TriangulatorType.planeGraph) {\r\n        const translator = new PointTranslator(graph.entries);\r\n        const edges = result.edges.map((edge) => [\r\n            translator.translate(edge[0]),\r\n            translator.translate(edge[1]),\r\n        ]);\r\n        trigs = triangulator.triangulate(translator.points, edges);\r\n    }\r\n    else {\r\n        trigs = [];\r\n        for (const loop of result.loops) {\r\n            const translator = new PointTranslator(graph.entries);\r\n            const loopIndices = loop.map((i) => translator.translate(i));\r\n            trigs.push(...triangulator.triangulate(translator.points, loopIndices));\r\n        }\r\n    }\r\n    return {\r\n        trigs,\r\n        edges: result.edges.map((edge) => [\r\n            graph.entries[edge[0]].coord,\r\n            graph.entries[edge[1]].coord,\r\n        ]),\r\n        conns: result.conns.map((edge) => [\r\n            graph.entries[edge[0]].coord,\r\n            graph.entries[edge[1]].coord,\r\n        ]),\r\n    };\r\n};\r\nexports[\"default\"] = triangulate;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/triangulate.js?");

/***/ }),

/***/ "./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HitTestTriangle = exports.triangleBox = exports.intersect = exports.contains = exports.direction = exports.edgeBox = exports.area = exports.dot = exports.norm = exports.equals = exports.isZero = exports.forEachPair = void 0;\r\nconst forEachPair = (iter, action, loopOver = false) => {\r\n    const first = iter.next();\r\n    if (!first.done) {\r\n        const start = first.value;\r\n        let prev = start;\r\n        for (const current of iter) {\r\n            action(prev, current);\r\n            prev = current;\r\n        }\r\n        if (loopOver) {\r\n            action(prev, start);\r\n        }\r\n    }\r\n};\r\nexports.forEachPair = forEachPair;\r\n// below are primitive operations in computational geometry\r\nconst THRESHOLD = 1e-8;\r\nconst isZero = (x) => x > -THRESHOLD && x < THRESHOLD;\r\nexports.isZero = isZero;\r\nconst equals = (p, q) => (0, exports.isZero)(p.x - q.x) && (0, exports.isZero)(p.y - q.y);\r\nexports.equals = equals;\r\n// 1-norm is the fastest norm to compute\r\nconst norm = (p, q) => Math.abs(p.x - q.x) + Math.abs(p.y - q.y);\r\nexports.norm = norm;\r\n// dot product between (a - b) and (c - b)\r\nconst dot = (a, b, c) => (a.x - b.x) * (c.x - b.x) + (a.y - b.y) * (c.y - b.y);\r\nexports.dot = dot;\r\n// cross product between (a - b) and (c - b)\r\nconst area = (a, b, c) => (a.x - b.x) * (c.y - b.y) - (a.y - b.y) * (c.x - b.x);\r\nexports.area = area;\r\nconst edgeBox = (edge) => {\r\n    const x0 = edge[0].x < edge[1].x ? edge[0].x : edge[1].x;\r\n    const x1 = edge[0].x > edge[1].x ? edge[0].x : edge[1].x;\r\n    const y0 = edge[0].y < edge[1].y ? edge[0].y : edge[1].y;\r\n    const y1 = edge[0].y > edge[1].y ? edge[0].y : edge[1].y;\r\n    return [\r\n        { x: x0 - THRESHOLD, y: y0 - THRESHOLD },\r\n        { x: x1 + THRESHOLD, y: y1 + THRESHOLD },\r\n    ];\r\n};\r\nexports.edgeBox = edgeBox;\r\nconst direction = (edge) => Math.atan2(edge[1].y - edge[0].y, edge[1].x - edge[0].x);\r\nexports.direction = direction;\r\nconst contains = (edge, target) => (0, exports.isZero)((0, exports.area)(edge[0], target, edge[1])) && (0, exports.dot)(edge[0], target, edge[1]) < 0;\r\nexports.contains = contains;\r\n// assumes four points are distinct, intersection not on ends, and do not treat overlap situations.\r\n// thus it suffices to compute matrix inverse\r\nconst intersect = (edge, other) => {\r\n    const a = edge[1].x - edge[0].x;\r\n    const b = other[0].x - other[1].x;\r\n    const c = edge[1].y - edge[0].y;\r\n    const d = other[0].y - other[1].y;\r\n    const p1 = other[0].x - edge[0].x;\r\n    const p2 = other[0].y - edge[0].y;\r\n    const det = a * d - b * c;\r\n    if ((0, exports.isZero)(det)) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        const dinv = 1 / det;\r\n        const t1 = dinv * (d * p1 - b * p2);\r\n        const t2 = dinv * (a * p2 - c * p1);\r\n        if (t1 > 0 && t1 < 1 && t2 > 0 && t2 < 1) {\r\n            return { x: edge[0].x + a * t1, y: edge[0].y + c * t1 };\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n};\r\nexports.intersect = intersect;\r\nconst triangleBox = (trig) => {\r\n    const x0 = trig[0].x < trig[1].x\r\n        ? trig[0].x < trig[2].x\r\n            ? trig[0].x\r\n            : trig[2].x\r\n        : trig[1].x < trig[2].x\r\n            ? trig[1].x\r\n            : trig[2].x;\r\n    const x1 = trig[0].x > trig[1].x\r\n        ? trig[0].x > trig[2].x\r\n            ? trig[0].x\r\n            : trig[2].x\r\n        : trig[1].x > trig[2].x\r\n            ? trig[1].x\r\n            : trig[2].x;\r\n    const y0 = trig[0].y < trig[1].y\r\n        ? trig[0].y < trig[2].y\r\n            ? trig[0].y\r\n            : trig[2].y\r\n        : trig[1].y < trig[2].y\r\n            ? trig[1].y\r\n            : trig[2].y;\r\n    const y1 = trig[0].y > trig[1].y\r\n        ? trig[0].y > trig[2].y\r\n            ? trig[0].y\r\n            : trig[2].y\r\n        : trig[1].y > trig[2].y\r\n            ? trig[1].y\r\n            : trig[2].y;\r\n    return [\r\n        { x: x0 - THRESHOLD, y: y0 - THRESHOLD },\r\n        { x: x1 + THRESHOLD, y: y1 + THRESHOLD },\r\n    ];\r\n};\r\nexports.triangleBox = triangleBox;\r\n// barycentric triangle hit-testing, with origin at `trig[1]`\r\n// points precisely on the edges are also counted as hits\r\nclass HitTestTriangle {\r\n    constructor(trig) {\r\n        this.origin = trig[1];\r\n        this.p1 = { x: trig[0].x - trig[1].x, y: trig[0].y - trig[1].y };\r\n        this.p2 = { x: trig[2].x - trig[1].x, y: trig[2].y - trig[1].y };\r\n        this.box = (0, exports.triangleBox)(trig);\r\n        this.det = this.p1.x * this.p2.y - this.p1.y * this.p2.x;\r\n        if (!(0, exports.isZero)(this.det)) {\r\n            if (this.det > 0) {\r\n                this.det += THRESHOLD;\r\n            }\r\n            else {\r\n                this.det -= THRESHOLD;\r\n            }\r\n        }\r\n    }\r\n    // no safety checking; output unreliable if `this.det === 0`\r\n    contains(point) {\r\n        if (point.x > this.box[0].x &&\r\n            point.x < this.box[1].x &&\r\n            point.y > this.box[0].y &&\r\n            point.y < this.box[1].y) {\r\n            const x = point.x - this.origin.x;\r\n            const y = point.y - this.origin.y;\r\n            const u = this.p2.y * x - this.p2.x * y;\r\n            const v = this.p1.x * y - this.p1.y * x;\r\n            if (this.det > 0) {\r\n                return u > -THRESHOLD && v > -THRESHOLD && u + v < this.det;\r\n            }\r\n            else {\r\n                return u < THRESHOLD && v < THRESHOLD && u + v > this.det;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nexports.HitTestTriangle = HitTestTriangle;\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./lib/utils.js?");

/***/ }),

/***/ "./node_modules/binary-search-bounds/search-bounds.js":
/*!************************************************************!*\
  !*** ./node_modules/binary-search-bounds/search-bounds.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n\n// (a, y, c, l, h) = (array, y[, cmp, lo, hi])\n\nfunction ge(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p >= 0) { i = m; h = m - 1 } else { l = m + 1 }\n  }\n  return i;\n};\n\nfunction gt(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p > 0) { i = m; h = m - 1 } else { l = m + 1 }\n  }\n  return i;\n};\n\nfunction lt(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p < 0) { i = m; l = m + 1 } else { h = m - 1 }\n  }\n  return i;\n};\n\nfunction le(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p <= 0) { i = m; l = m + 1 } else { h = m - 1 }\n  }\n  return i;\n};\n\nfunction eq(a, y, c, l, h) {\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p === 0) { return m }\n    if (p <= 0) { l = m + 1 } else { h = m - 1 }\n  }\n  return -1;\n};\n\nfunction norm(a, y, c, l, h, f) {\n  if (typeof c === 'function') {\n    return f(a, y, c, (l === undefined) ? 0 : l | 0, (h === undefined) ? a.length - 1 : h | 0);\n  }\n  return f(a, y, undefined, (c === undefined) ? 0 : c | 0, (l === undefined) ? a.length - 1 : l | 0);\n}\n\nmodule.exports = {\n  ge: function(a, y, c, l, h) { return norm(a, y, c, l, h, ge)},\n  gt: function(a, y, c, l, h) { return norm(a, y, c, l, h, gt)},\n  lt: function(a, y, c, l, h) { return norm(a, y, c, l, h, lt)},\n  le: function(a, y, c, l, h) { return norm(a, y, c, l, h, le)},\n  eq: function(a, y, c, l, h) { return norm(a, y, c, l, h, eq)}\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/binary-search-bounds/search-bounds.js?");

/***/ }),

/***/ "./node_modules/cdt2d/cdt2d.js":
/*!*************************************!*\
  !*** ./node_modules/cdt2d/cdt2d.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar monotoneTriangulate = __webpack_require__(/*! ./lib/monotone */ \"./node_modules/cdt2d/lib/monotone.js\")\nvar makeIndex = __webpack_require__(/*! ./lib/triangulation */ \"./node_modules/cdt2d/lib/triangulation.js\")\nvar delaunayFlip = __webpack_require__(/*! ./lib/delaunay */ \"./node_modules/cdt2d/lib/delaunay.js\")\nvar filterTriangulation = __webpack_require__(/*! ./lib/filter */ \"./node_modules/cdt2d/lib/filter.js\")\n\nmodule.exports = cdt2d\n\nfunction canonicalizeEdge(e) {\n  return [Math.min(e[0], e[1]), Math.max(e[0], e[1])]\n}\n\nfunction compareEdge(a, b) {\n  return a[0]-b[0] || a[1]-b[1]\n}\n\nfunction canonicalizeEdges(edges) {\n  return edges.map(canonicalizeEdge).sort(compareEdge)\n}\n\nfunction getDefault(options, property, dflt) {\n  if(property in options) {\n    return options[property]\n  }\n  return dflt\n}\n\nfunction cdt2d(points, edges, options) {\n\n  if(!Array.isArray(edges)) {\n    options = edges || {}\n    edges = []\n  } else {\n    options = options || {}\n    edges = edges || []\n  }\n\n  //Parse out options\n  var delaunay = !!getDefault(options, 'delaunay', true)\n  var interior = !!getDefault(options, 'interior', true)\n  var exterior = !!getDefault(options, 'exterior', true)\n  var infinity = !!getDefault(options, 'infinity', false)\n\n  //Handle trivial case\n  if((!interior && !exterior) || points.length === 0) {\n    return []\n  }\n\n  //Construct initial triangulation\n  var cells = monotoneTriangulate(points, edges)\n\n  //If delaunay refinement needed, then improve quality by edge flipping\n  if(delaunay || interior !== exterior || infinity) {\n\n    //Index all of the cells to support fast neighborhood queries\n    var triangulation = makeIndex(points.length, canonicalizeEdges(edges))\n    for(var i=0; i<cells.length; ++i) {\n      var f = cells[i]\n      triangulation.addTriangle(f[0], f[1], f[2])\n    }\n\n    //Run edge flipping\n    if(delaunay) {\n      delaunayFlip(points, triangulation)\n    }\n\n    //Filter points\n    if(!exterior) {\n      return filterTriangulation(triangulation, -1)\n    } else if(!interior) {\n      return filterTriangulation(triangulation,  1, infinity)\n    } else if(infinity) {\n      return filterTriangulation(triangulation, 0, infinity)\n    } else {\n      return triangulation.cells()\n    }\n    \n  } else {\n    return cells\n  }\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/cdt2d/cdt2d.js?");

/***/ }),

/***/ "./node_modules/cdt2d/lib/delaunay.js":
/*!********************************************!*\
  !*** ./node_modules/cdt2d/lib/delaunay.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar inCircle = (__webpack_require__(/*! robust-in-sphere */ \"./node_modules/robust-in-sphere/in-sphere.js\")[4])\nvar bsearch = __webpack_require__(/*! binary-search-bounds */ \"./node_modules/binary-search-bounds/search-bounds.js\")\n\nmodule.exports = delaunayRefine\n\nfunction testFlip(points, triangulation, stack, a, b, x) {\n  var y = triangulation.opposite(a, b)\n\n  //Test boundary edge\n  if(y < 0) {\n    return\n  }\n\n  //Swap edge if order flipped\n  if(b < a) {\n    var tmp = a\n    a = b\n    b = tmp\n    tmp = x\n    x = y\n    y = tmp\n  }\n\n  //Test if edge is constrained\n  if(triangulation.isConstraint(a, b)) {\n    return\n  }\n\n  //Test if edge is delaunay\n  if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n    stack.push(a, b)\n  }\n}\n\n//Assume edges are sorted lexicographically\nfunction delaunayRefine(points, triangulation) {\n  var stack = []\n\n  var numPoints = points.length\n  var stars = triangulation.stars\n  for(var a=0; a<numPoints; ++a) {\n    var star = stars[a]\n    for(var j=1; j<star.length; j+=2) {\n      var b = star[j]\n\n      //If order is not consistent, then skip edge\n      if(b < a) {\n        continue\n      }\n\n      //Check if edge is constrained\n      if(triangulation.isConstraint(a, b)) {\n        continue\n      }\n\n      //Find opposite edge\n      var x = star[j-1], y = -1\n      for(var k=1; k<star.length; k+=2) {\n        if(star[k-1] === b) {\n          y = star[k]\n          break\n        }\n      }\n\n      //If this is a boundary edge, don't flip it\n      if(y < 0) {\n        continue\n      }\n\n      //If edge is in circle, flip it\n      if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n        stack.push(a, b)\n      }\n    }\n  }\n\n  while(stack.length > 0) {\n    var b = stack.pop()\n    var a = stack.pop()\n\n    //Find opposite pairs\n    var x = -1, y = -1\n    var star = stars[a]\n    for(var i=1; i<star.length; i+=2) {\n      var s = star[i-1]\n      var t = star[i]\n      if(s === b) {\n        y = t\n      } else if(t === b) {\n        x = s\n      }\n    }\n\n    //If x/y are both valid then skip edge\n    if(x < 0 || y < 0) {\n      continue\n    }\n\n    //If edge is now delaunay, then don't flip it\n    if(inCircle(points[a], points[b], points[x], points[y]) >= 0) {\n      continue\n    }\n\n    //Flip the edge\n    triangulation.flip(a, b)\n\n    //Test flipping neighboring edges\n    testFlip(points, triangulation, stack, x, a, y)\n    testFlip(points, triangulation, stack, a, y, x)\n    testFlip(points, triangulation, stack, y, b, x)\n    testFlip(points, triangulation, stack, b, x, y)\n  }\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/cdt2d/lib/delaunay.js?");

/***/ }),

/***/ "./node_modules/cdt2d/lib/filter.js":
/*!******************************************!*\
  !*** ./node_modules/cdt2d/lib/filter.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar bsearch = __webpack_require__(/*! binary-search-bounds */ \"./node_modules/binary-search-bounds/search-bounds.js\")\n\nmodule.exports = classifyFaces\n\nfunction FaceIndex(cells, neighbor, constraint, flags, active, next, boundary) {\n  this.cells       = cells\n  this.neighbor    = neighbor\n  this.flags       = flags\n  this.constraint  = constraint\n  this.active      = active\n  this.next        = next\n  this.boundary    = boundary\n}\n\nvar proto = FaceIndex.prototype\n\nfunction compareCell(a, b) {\n  return a[0] - b[0] ||\n         a[1] - b[1] ||\n         a[2] - b[2]\n}\n\nproto.locate = (function() {\n  var key = [0,0,0]\n  return function(a, b, c) {\n    var x = a, y = b, z = c\n    if(b < c) {\n      if(b < a) {\n        x = b\n        y = c\n        z = a\n      }\n    } else if(c < a) {\n      x = c\n      y = a\n      z = b\n    }\n    if(x < 0) {\n      return -1\n    }\n    key[0] = x\n    key[1] = y\n    key[2] = z\n    return bsearch.eq(this.cells, key, compareCell)\n  }\n})()\n\nfunction indexCells(triangulation, infinity) {\n  //First get cells and canonicalize\n  var cells = triangulation.cells()\n  var nc = cells.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    var x = c[0], y = c[1], z = c[2]\n    if(y < z) {\n      if(y < x) {\n        c[0] = y\n        c[1] = z\n        c[2] = x\n      }\n    } else if(z < x) {\n      c[0] = z\n      c[1] = x\n      c[2] = y\n    }\n  }\n  cells.sort(compareCell)\n\n  //Initialize flag array\n  var flags = new Array(nc)\n  for(var i=0; i<flags.length; ++i) {\n    flags[i] = 0\n  }\n\n  //Build neighbor index, initialize queues\n  var active = []\n  var next   = []\n  var neighbor = new Array(3*nc)\n  var constraint = new Array(3*nc)\n  var boundary = null\n  if(infinity) {\n    boundary = []\n  }\n  var index = new FaceIndex(\n    cells,\n    neighbor,\n    constraint,\n    flags,\n    active,\n    next,\n    boundary)\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<3; ++j) {\n      var x = c[j], y = c[(j+1)%3]\n      var a = neighbor[3*i+j] = index.locate(y, x, triangulation.opposite(y, x))\n      var b = constraint[3*i+j] = triangulation.isConstraint(x, y)\n      if(a < 0) {\n        if(b) {\n          next.push(i)\n        } else {\n          active.push(i)\n          flags[i] = 1\n        }\n        if(infinity) {\n          boundary.push([y, x, -1])\n        }\n      }\n    }\n  }\n  return index\n}\n\nfunction filterCells(cells, flags, target) {\n  var ptr = 0\n  for(var i=0; i<cells.length; ++i) {\n    if(flags[i] === target) {\n      cells[ptr++] = cells[i]\n    }\n  }\n  cells.length = ptr\n  return cells\n}\n\nfunction classifyFaces(triangulation, target, infinity) {\n  var index = indexCells(triangulation, infinity)\n\n  if(target === 0) {\n    if(infinity) {\n      return index.cells.concat(index.boundary)\n    } else {\n      return index.cells\n    }\n  }\n\n  var side = 1\n  var active = index.active\n  var next = index.next\n  var flags = index.flags\n  var cells = index.cells\n  var constraint = index.constraint\n  var neighbor = index.neighbor\n\n  while(active.length > 0 || next.length > 0) {\n    while(active.length > 0) {\n      var t = active.pop()\n      if(flags[t] === -side) {\n        continue\n      }\n      flags[t] = side\n      var c = cells[t]\n      for(var j=0; j<3; ++j) {\n        var f = neighbor[3*t+j]\n        if(f >= 0 && flags[f] === 0) {\n          if(constraint[3*t+j]) {\n            next.push(f)\n          } else {\n            active.push(f)\n            flags[f] = side\n          }\n        }\n      }\n    }\n\n    //Swap arrays and loop\n    var tmp = next\n    next = active\n    active = tmp\n    next.length = 0\n    side = -side\n  }\n\n  var result = filterCells(cells, flags, target)\n  if(infinity) {\n    return result.concat(index.boundary)\n  }\n  return result\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/cdt2d/lib/filter.js?");

/***/ }),

/***/ "./node_modules/cdt2d/lib/monotone.js":
/*!********************************************!*\
  !*** ./node_modules/cdt2d/lib/monotone.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar bsearch = __webpack_require__(/*! binary-search-bounds */ \"./node_modules/binary-search-bounds/search-bounds.js\")\nvar orient = (__webpack_require__(/*! robust-orientation */ \"./node_modules/robust-orientation/orientation.js\")[3])\n\nvar EVENT_POINT = 0\nvar EVENT_END   = 1\nvar EVENT_START = 2\n\nmodule.exports = monotoneTriangulate\n\n//A partial convex hull fragment, made of two unimonotone polygons\nfunction PartialHull(a, b, idx, lowerIds, upperIds) {\n  this.a = a\n  this.b = b\n  this.idx = idx\n  this.lowerIds = lowerIds\n  this.upperIds = upperIds\n}\n\n//An event in the sweep line procedure\nfunction Event(a, b, type, idx) {\n  this.a    = a\n  this.b    = b\n  this.type = type\n  this.idx  = idx\n}\n\n//This is used to compare events for the sweep line procedure\n// Points are:\n//  1. sorted lexicographically\n//  2. sorted by type  (point < end < start)\n//  3. segments sorted by winding order\n//  4. sorted by index\nfunction compareEvent(a, b) {\n  var d =\n    (a.a[0] - b.a[0]) ||\n    (a.a[1] - b.a[1]) ||\n    (a.type - b.type)\n  if(d) { return d }\n  if(a.type !== EVENT_POINT) {\n    d = orient(a.a, a.b, b.b)\n    if(d) { return d }\n  }\n  return a.idx - b.idx\n}\n\nfunction testPoint(hull, p) {\n  return orient(hull.a, hull.b, p)\n}\n\nfunction addPoint(cells, hulls, points, p, idx) {\n  var lo = bsearch.lt(hulls, p, testPoint)\n  var hi = bsearch.gt(hulls, p, testPoint)\n  for(var i=lo; i<hi; ++i) {\n    var hull = hulls[i]\n\n    //Insert p into lower hull\n    var lowerIds = hull.lowerIds\n    var m = lowerIds.length\n    while(m > 1 && orient(\n        points[lowerIds[m-2]],\n        points[lowerIds[m-1]],\n        p) > 0) {\n      cells.push(\n        [lowerIds[m-1],\n         lowerIds[m-2],\n         idx])\n      m -= 1\n    }\n    lowerIds.length = m\n    lowerIds.push(idx)\n\n    //Insert p into upper hull\n    var upperIds = hull.upperIds\n    var m = upperIds.length\n    while(m > 1 && orient(\n        points[upperIds[m-2]],\n        points[upperIds[m-1]],\n        p) < 0) {\n      cells.push(\n        [upperIds[m-2],\n         upperIds[m-1],\n         idx])\n      m -= 1\n    }\n    upperIds.length = m\n    upperIds.push(idx)\n  }\n}\n\nfunction findSplit(hull, edge) {\n  var d\n  if(hull.a[0] < edge.a[0]) {\n    d = orient(hull.a, hull.b, edge.a)\n  } else {\n    d = orient(edge.b, edge.a, hull.a)\n  }\n  if(d) { return d }\n  if(edge.b[0] < hull.b[0]) {\n    d = orient(hull.a, hull.b, edge.b)\n  } else {\n    d = orient(edge.b, edge.a, hull.b)\n  }\n  return d || hull.idx - edge.idx\n}\n\nfunction splitHulls(hulls, points, event) {\n  var splitIdx = bsearch.le(hulls, event, findSplit)\n  var hull = hulls[splitIdx]\n  var upperIds = hull.upperIds\n  var x = upperIds[upperIds.length-1]\n  hull.upperIds = [x]\n  hulls.splice(splitIdx+1, 0,\n    new PartialHull(event.a, event.b, event.idx, [x], upperIds))\n}\n\n\nfunction mergeHulls(hulls, points, event) {\n  //Swap pointers for merge search\n  var tmp = event.a\n  event.a = event.b\n  event.b = tmp\n  var mergeIdx = bsearch.eq(hulls, event, findSplit)\n  var upper = hulls[mergeIdx]\n  var lower = hulls[mergeIdx-1]\n  lower.upperIds = upper.upperIds\n  hulls.splice(mergeIdx, 1)\n}\n\n\nfunction monotoneTriangulate(points, edges) {\n\n  var numPoints = points.length\n  var numEdges = edges.length\n\n  var events = []\n\n  //Create point events\n  for(var i=0; i<numPoints; ++i) {\n    events.push(new Event(\n      points[i],\n      null,\n      EVENT_POINT,\n      i))\n  }\n\n  //Create edge events\n  for(var i=0; i<numEdges; ++i) {\n    var e = edges[i]\n    var a = points[e[0]]\n    var b = points[e[1]]\n    if(a[0] < b[0]) {\n      events.push(\n        new Event(a, b, EVENT_START, i),\n        new Event(b, a, EVENT_END, i))\n    } else if(a[0] > b[0]) {\n      events.push(\n        new Event(b, a, EVENT_START, i),\n        new Event(a, b, EVENT_END, i))\n    }\n  }\n\n  //Sort events\n  events.sort(compareEvent)\n\n  //Initialize hull\n  var minX = events[0].a[0] - (1 + Math.abs(events[0].a[0])) * Math.pow(2, -52)\n  var hull = [ new PartialHull([minX, 1], [minX, 0], -1, [], [], [], []) ]\n\n  //Process events in order\n  var cells = []\n  for(var i=0, numEvents=events.length; i<numEvents; ++i) {\n    var event = events[i]\n    var type = event.type\n    if(type === EVENT_POINT) {\n      addPoint(cells, hull, points, event.a, event.idx)\n    } else if(type === EVENT_START) {\n      splitHulls(hull, points, event)\n    } else {\n      mergeHulls(hull, points, event)\n    }\n  }\n\n  //Return triangulation\n  return cells\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/cdt2d/lib/monotone.js?");

/***/ }),

/***/ "./node_modules/cdt2d/lib/triangulation.js":
/*!*************************************************!*\
  !*** ./node_modules/cdt2d/lib/triangulation.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar bsearch = __webpack_require__(/*! binary-search-bounds */ \"./node_modules/binary-search-bounds/search-bounds.js\")\n\nmodule.exports = createTriangulation\n\nfunction Triangulation(stars, edges) {\n  this.stars = stars\n  this.edges = edges\n}\n\nvar proto = Triangulation.prototype\n\nfunction removePair(list, j, k) {\n  for(var i=1, n=list.length; i<n; i+=2) {\n    if(list[i-1] === j && list[i] === k) {\n      list[i-1] = list[n-2]\n      list[i] = list[n-1]\n      list.length = n - 2\n      return\n    }\n  }\n}\n\nproto.isConstraint = (function() {\n  var e = [0,0]\n  function compareLex(a, b) {\n    return a[0] - b[0] || a[1] - b[1]\n  }\n  return function(i, j) {\n    e[0] = Math.min(i,j)\n    e[1] = Math.max(i,j)\n    return bsearch.eq(this.edges, e, compareLex) >= 0\n  }\n})()\n\nproto.removeTriangle = function(i, j, k) {\n  var stars = this.stars\n  removePair(stars[i], j, k)\n  removePair(stars[j], k, i)\n  removePair(stars[k], i, j)\n}\n\nproto.addTriangle = function(i, j, k) {\n  var stars = this.stars\n  stars[i].push(j, k)\n  stars[j].push(k, i)\n  stars[k].push(i, j)\n}\n\nproto.opposite = function(j, i) {\n  var list = this.stars[i]\n  for(var k=1, n=list.length; k<n; k+=2) {\n    if(list[k] === j) {\n      return list[k-1]\n    }\n  }\n  return -1\n}\n\nproto.flip = function(i, j) {\n  var a = this.opposite(i, j)\n  var b = this.opposite(j, i)\n  this.removeTriangle(i, j, a)\n  this.removeTriangle(j, i, b)\n  this.addTriangle(i, b, a)\n  this.addTriangle(j, a, b)\n}\n\nproto.edges = function() {\n  var stars = this.stars\n  var result = []\n  for(var i=0, n=stars.length; i<n; ++i) {\n    var list = stars[i]\n    for(var j=0, m=list.length; j<m; j+=2) {\n      result.push([list[j], list[j+1]])\n    }\n  }\n  return result\n}\n\nproto.cells = function() {\n  var stars = this.stars\n  var result = []\n  for(var i=0, n=stars.length; i<n; ++i) {\n    var list = stars[i]\n    for(var j=0, m=list.length; j<m; j+=2) {\n      var s = list[j]\n      var t = list[j+1]\n      if(i < Math.min(s, t)) {\n        result.push([i, s, t])\n      }\n    }\n  }\n  return result\n}\n\nfunction createTriangulation(numVerts, edges) {\n  var stars = new Array(numVerts)\n  for(var i=0; i<numVerts; ++i) {\n    stars[i] = []\n  }\n  return new Triangulation(stars, edges)\n}\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/cdt2d/lib/triangulation.js?");

/***/ }),

/***/ "./node_modules/denque/index.js":
/*!**************************************!*\
  !*** ./node_modules/denque/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n  this._capacity = options.capacity;\n\n  this._head = 0;\n  this._tail = 0;\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  } else {\n    this._capacityMask = 0x3;\n    this._list = new Array(4);\n  }\n}\n\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (arguments.length === 0) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (arguments.length === 0) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = (i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._list = new Array(this._list.length);\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  var length = array.length;\n  var capacity = this._nextPowerOf2(length);\n\n  this._list = new Array(capacity);\n  this._capacityMask = capacity - 1;\n  this._tail = length;\n\n  for (var i = 0; i < length; i++) this._list[i] = array[i];\n};\n\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy, size) {\n  var src = this._list;\n  var capacity = src.length;\n  var length = this.length;\n  size = size | length;\n\n  // No prealloc requested and the buffer is contiguous\n  if (size == length && this._head < this._tail) {\n    // Simply do a fast slice copy\n    return this._list.slice(this._head, this._tail);\n  }\n\n  var dest = new Array(size);\n\n  var k = 0;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < capacity; i++) dest[k++] = src[i];\n    for (i = 0; i < this._tail; i++) dest[k++] = src[i];\n  } else {\n    for (i = this._head; i < this._tail; i++) dest[k++] = src[i];\n  }\n\n  return dest;\n}\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head != 0) {\n    // double array size and copy existing data, head to end, then beginning to tail.\n    var newList = this._copyArray(true, this._list.length << 1);\n\n    this._tail = this._list.length;\n    this._head = 0;\n\n    this._list = newList;\n  } else {\n    this._tail = this._list.length;\n    this._list.length <<= 1;\n  }\n\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */\nDenque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n  var log2 = Math.log(num) / Math.log(2);\n  var nextPow2 = 1 << (log2 + 1);\n\n  return Math.max(nextPow2, 4);\n}\n\nmodule.exports = Denque;\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/denque/index.js?");

/***/ }),

/***/ "./node_modules/earcut/src/earcut.js":
/*!*******************************************!*\
  !*** ./node_modules/earcut/src/earcut.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = earcut;\nmodule.exports[\"default\"] = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/earcut/src/earcut.js?");

/***/ }),

/***/ "./node_modules/robust-in-sphere/in-sphere.js":
/*!****************************************************!*\
  !*** ./node_modules/robust-in-sphere/in-sphere.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar twoProduct = __webpack_require__(/*! two-product */ \"./node_modules/two-product/two-product.js\")\nvar robustSum = __webpack_require__(/*! robust-sum */ \"./node_modules/robust-sum/robust-sum.js\")\nvar robustDiff = __webpack_require__(/*! robust-subtract */ \"./node_modules/robust-subtract/robust-diff.js\")\nvar robustScale = __webpack_require__(/*! robust-scale */ \"./node_modules/robust-scale/robust-scale.js\")\n\nvar NUM_EXPAND = 6\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? inSphere3 :\n    n === 4 ? inSphere4 :\n    n === 5 ? inSphere5 : inSphere6;\n\n  return fn(robustSum, robustDiff, twoProduct, robustScale)\n}\n\nfunction inSphere0() { return 0 }\nfunction inSphere1() { return 0 }\nfunction inSphere2() { return 0 }\n\nfunction inSphere3(sum, diff, prod, scale) {\n  function exactInSphere3(m0, m1, m2) {\n    var w0 = prod(m0[0], m0[0])\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w1 = prod(m1[0], m1[0])\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w2 = prod(m2[0], m2[0])\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var p = sum(diff(w2m1, w1m2), diff(w1m0, w0m1))\n    var n = diff(w2m0, w0m2)\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere3\n}\n\nfunction inSphere4(sum, diff, prod, scale) {\n  function exactInSphere4(m0, m1, m2, m3) {\n    var w0 = sum(prod(m0[0], m0[0]), prod(m0[1], m0[1]))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w1 = sum(prod(m1[0], m1[0]), prod(m1[1], m1[1]))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w2 = sum(prod(m2[0], m2[0]), prod(m2[1], m2[1]))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w3 = sum(prod(m3[0], m3[0]), prod(m3[1], m3[1]))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var p = sum(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))))\n    var n = sum(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere4\n}\n\n\nfunction inSphere5(sum, diff, prod, scale) {\n  function exactInSphere5(m0, m1, m2, m3, m4) {\n    var w0 = sum(prod(m0[0], m0[0]), sum(prod(m0[1], m0[1]), prod(m0[2], m0[2])))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w0m4 = scale(w0, m4[0])\n    var w1 = sum(prod(m1[0], m1[0]), sum(prod(m1[1], m1[1]), prod(m1[2], m1[2])))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w1m4 = scale(w1, m4[0])\n    var w2 = sum(prod(m2[0], m2[0]), sum(prod(m2[1], m2[1]), prod(m2[2], m2[2])))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w2m4 = scale(w2, m4[0])\n    var w3 = sum(prod(m3[0], m3[0]), sum(prod(m3[1], m3[1]), prod(m3[2], m3[2])))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var w3m4 = scale(w3, m4[0])\n    var w4 = sum(prod(m4[0], m4[0]), sum(prod(m4[1], m4[1]), prod(m4[2], m4[2])))\n    var w4m0 = scale(w4, m0[0])\n    var w4m1 = scale(w4, m1[0])\n    var w4m2 = scale(w4, m2[0])\n    var w4m3 = scale(w4, m3[0])\n    var p = sum(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]))), sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]), sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])))), sum(sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]))), sum(scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2]), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2])))))\n    var n = sum(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n\n    return exactInSphere5\n}\n\nfunction inSphere6(sum, diff, prod, scale) {\n  function exactInSphere6(m0, m1, m2, m3, m4, m5) {\n    var w0 = sum(sum(prod(m0[0], m0[0]), prod(m0[1], m0[1])), sum(prod(m0[2], m0[2]), prod(m0[3], m0[3])))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w0m4 = scale(w0, m4[0])\n    var w0m5 = scale(w0, m5[0])\n    var w1 = sum(sum(prod(m1[0], m1[0]), prod(m1[1], m1[1])), sum(prod(m1[2], m1[2]), prod(m1[3], m1[3])))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w1m4 = scale(w1, m4[0])\n    var w1m5 = scale(w1, m5[0])\n    var w2 = sum(sum(prod(m2[0], m2[0]), prod(m2[1], m2[1])), sum(prod(m2[2], m2[2]), prod(m2[3], m2[3])))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w2m4 = scale(w2, m4[0])\n    var w2m5 = scale(w2, m5[0])\n    var w3 = sum(sum(prod(m3[0], m3[0]), prod(m3[1], m3[1])), sum(prod(m3[2], m3[2]), prod(m3[3], m3[3])))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var w3m4 = scale(w3, m4[0])\n    var w3m5 = scale(w3, m5[0])\n    var w4 = sum(sum(prod(m4[0], m4[0]), prod(m4[1], m4[1])), sum(prod(m4[2], m4[2]), prod(m4[3], m4[3])))\n    var w4m0 = scale(w4, m0[0])\n    var w4m1 = scale(w4, m1[0])\n    var w4m2 = scale(w4, m2[0])\n    var w4m3 = scale(w4, m3[0])\n    var w4m5 = scale(w4, m5[0])\n    var w5 = sum(sum(prod(m5[0], m5[0]), prod(m5[1], m5[1])), sum(prod(m5[2], m5[2]), prod(m5[3], m5[3])))\n    var w5m0 = scale(w5, m0[0])\n    var w5m1 = scale(w5, m1[0])\n    var w5m2 = scale(w5, m2[0])\n    var w5m3 = scale(w5, m3[0])\n    var w5m4 = scale(w5, m4[0])\n    var p = sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m2[2]), scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), -m5[2]))), m1[3]), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m5[2]))), -m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), -m5[2]))), m3[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m1[2]), scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m5[2]))), -m4[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]))), m5[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m5[2]))), m0[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m5[2]))), -m1[3])))), sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m4[2]), scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), -m5[2]))), m3[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m5[2]))), -m4[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]))), m5[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m1[2]), scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m5[2]))), m0[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m5[2]))), -m1[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m5[2]))), m2[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m0[2]), scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m5[2]))), -m3[3]), scale(sum(sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2])), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2]))), m5[3])))))\n    var n = sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m2[2]), scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), -m5[2]))), m0[3]), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m5[2]))), -m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m5[2]))), m3[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m5[2]))), -m4[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), m5[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), -m5[2]))), m0[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m5[2]))), -m1[3])))), sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m4[2]), scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), -m5[2]))), m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m0[2]), scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m5[2]))), -m4[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))), m5[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]))), m0[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), -m1[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]))), m2[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))), -m3[3]), scale(sum(sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2])), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2]))), m4[3])))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere6\n}\n\nvar CACHED = [\n  inSphere0,\n  inSphere1,\n  inSphere2\n]\n\nfunction slowInSphere(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc(slow, o0, o1, o2, o3, o4, o5, o6) {\n  function testInSphere(a0, a1, a2, a3, a4, a5) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n      case 6:\n        return o6(a0, a1, a2, a3, a4, a5)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n  return testInSphere\n}\n\nfunction generateInSphereTest() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n\n  module.exports = proc.apply(undefined, [slowInSphere].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateInSphereTest()\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/robust-in-sphere/in-sphere.js?");

/***/ }),

/***/ "./node_modules/robust-orientation/orientation.js":
/*!********************************************************!*\
  !*** ./node_modules/robust-orientation/orientation.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar twoProduct = __webpack_require__(/*! two-product */ \"./node_modules/two-product/two-product.js\")\nvar robustSum = __webpack_require__(/*! robust-sum */ \"./node_modules/robust-sum/robust-sum.js\")\nvar robustScale = __webpack_require__(/*! robust-scale */ \"./node_modules/robust-scale/robust-scale.js\")\nvar robustSubtract = __webpack_require__(/*! robust-subtract */ \"./node_modules/robust-subtract/robust-diff.js\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction orientation_3(sum, prod, scale, sub) {\n  return function orientation3Exact(m0, m1, m2) {\n    var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])))\n    var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_4(sum, prod, scale, sub) {\n  return function orientation4Exact(m0, m1, m2, m3) {\n    var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))))\n    var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_5(sum, prod, scale, sub) {\n  return function orientation5Exact(m0, m1, m2, m3, m4) {\n    var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))))\n    var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? orientation_3 :\n    n === 4 ? orientation_4 : orientation_5\n\n  return fn(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) {\n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy)\n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc (slow, o0, o1, o2, o3, o4, o5) {\n  return function getOrientation(a0, a1, a2, a3, a4) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/robust-orientation/orientation.js?");

/***/ }),

/***/ "./node_modules/robust-scale/robust-scale.js":
/*!***************************************************!*\
  !*** ./node_modules/robust-scale/robust-scale.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar twoProduct = __webpack_require__(/*! two-product */ \"./node_modules/two-product/two-product.js\")\nvar twoSum = __webpack_require__(/*! two-sum */ \"./node_modules/two-sum/two-sum.js\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/robust-scale/robust-scale.js?");

/***/ }),

/***/ "./node_modules/robust-subtract/robust-diff.js":
/*!*****************************************************!*\
  !*** ./node_modules/robust-subtract/robust-diff.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/robust-subtract/robust-diff.js?");

/***/ }),

/***/ "./node_modules/robust-sum/robust-sum.js":
/*!***********************************************!*\
  !*** ./node_modules/robust-sum/robust-sum.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/robust-sum/robust-sum.js?");

/***/ }),

/***/ "./example/src/main.ts":
/*!*****************************!*\
  !*** ./example/src/main.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst earcut_1 = __importStar(__webpack_require__(/*! earcut */ \"./node_modules/earcut/src/earcut.js\"));\r\nconst cdt2d_1 = __importDefault(__webpack_require__(/*! cdt2d */ \"./node_modules/cdt2d/cdt2d.js\"));\r\nconst __1 = __importStar(__webpack_require__(/*! ../.. */ \"./lib/index.js\"));\r\nclass EarcutTriangulator {\r\n    constructor() {\r\n        this.type = __1.TriangulatorType.loop;\r\n    }\r\n    triangulate(points, loop) {\r\n        const data = (0, earcut_1.flatten)([loop.map((p) => [points[p].x, points[p].y])]);\r\n        const verts = (0, earcut_1.default)(data.vertices, data.holes, data.dimensions);\r\n        const vertex = (index) => ({\r\n            x: data.vertices[index * data.dimensions],\r\n            y: data.vertices[index * data.dimensions + 1],\r\n        });\r\n        const trigs = new Array();\r\n        for (let i = 0; i + 2 < verts.length; i += 3) {\r\n            trigs.push([\r\n                vertex(verts[i]),\r\n                vertex(verts[i + 1]),\r\n                vertex(verts[i + 2]),\r\n            ]);\r\n        }\r\n        return trigs;\r\n    }\r\n}\r\nclass CDT2DTriangulator {\r\n    constructor() {\r\n        this.type = __1.TriangulatorType.planeGraph;\r\n    }\r\n    triangulate(points, edges) {\r\n        const pointArray = points.map((p) => [p.x, p.y]);\r\n        const trigs = (0, cdt2d_1.default)(pointArray, edges, { exterior: false });\r\n        return trigs.map((t) => [\r\n            points[t[0]],\r\n            points[t[1]],\r\n            points[t[2]],\r\n        ]);\r\n    }\r\n}\r\nconst TRIANGULATORS = {\r\n    earcut: new EarcutTriangulator(),\r\n    cdt2d: new CDT2DTriangulator(),\r\n};\r\nlet triangulator = undefined;\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst context = canvas.getContext(\"2d\");\r\nlet paths = new Array();\r\nconst drawTriangle = (context, points) => {\r\n    context.moveTo(points[0].x, points[0].y);\r\n    context.lineTo(points[1].x, points[1].y);\r\n    context.lineTo(points[2].x, points[2].y);\r\n    context.lineTo(points[0].x, points[0].y);\r\n};\r\nconst drawEdge = (context, points) => {\r\n    context.moveTo(points[0].x, points[0].y);\r\n    context.lineTo(points[1].x, points[1].y);\r\n};\r\nconst drawPoint = (context, point, radius) => {\r\n    context.moveTo(point.x, point.y);\r\n    context.arc(point.x, point.y, radius, 0, 2 * Math.PI);\r\n};\r\nconst draw = () => {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    const computed = triangulator === undefined\r\n        ? (0, __1.default)(paths)\r\n        : (0, __1.default)(paths, triangulator);\r\n    console.log(`${computed.trigs.length} triangles!`);\r\n    context.fillStyle = \"#99FF99\";\r\n    context.beginPath();\r\n    for (const trig of computed.trigs) {\r\n        drawTriangle(context, trig);\r\n    }\r\n    context.fill();\r\n    context.lineWidth = 1;\r\n    context.strokeStyle = \"#666666\";\r\n    context.beginPath();\r\n    for (const trig of computed.trigs) {\r\n        drawTriangle(context, trig);\r\n    }\r\n    context.stroke();\r\n    context.lineWidth = 2;\r\n    context.strokeStyle = \"#990000\";\r\n    context.beginPath();\r\n    for (const edge of computed.edges) {\r\n        drawEdge(context, edge);\r\n    }\r\n    context.stroke();\r\n    context.strokeStyle = \"#ff0000\";\r\n    context.beginPath();\r\n    for (const edge of computed.conns) {\r\n        drawEdge(context, edge);\r\n    }\r\n    context.stroke();\r\n    context.fillStyle = \"black\";\r\n    context.beginPath();\r\n    for (const edge of computed.edges) {\r\n        drawPoint(context, edge[0], 3);\r\n        drawPoint(context, edge[1], 3);\r\n    }\r\n    for (const edge of computed.conns) {\r\n        drawPoint(context, edge[0], 3);\r\n        drawPoint(context, edge[1], 3);\r\n    }\r\n    context.fill();\r\n    context.fillStyle = \"#0000cc\";\r\n    context.beginPath();\r\n    for (const path of paths) {\r\n        for (const point of path) {\r\n            drawPoint(context, point, 4);\r\n        }\r\n    }\r\n    context.fill();\r\n};\r\ncanvas.addEventListener(\"mousedown\", (event) => {\r\n    if (event.button == 0) {\r\n        let x = event.clientX;\r\n        let y = event.clientY;\r\n        if (event.altKey) {\r\n            x = Math.round(x / 50) * 50;\r\n            y = Math.round(y / 50) * 50;\r\n        }\r\n        if (event.shiftKey) {\r\n            paths.push([{ x, y }]);\r\n        }\r\n        else if (event.ctrlKey) {\r\n            const newPaths = new Array();\r\n            for (const path of paths) {\r\n                const newPath = new Array();\r\n                for (const point of path) {\r\n                    const sqrd = Math.pow(point.x - x, 2) + Math.pow(point.y - y, 2);\r\n                    if (sqrd > Math.pow(10, 2)) {\r\n                        newPath.push(point);\r\n                    }\r\n                }\r\n                if (newPath.length > 0) {\r\n                    newPaths.push(newPath);\r\n                }\r\n            }\r\n            paths = newPaths;\r\n        }\r\n        else {\r\n            if (paths.length === 0) {\r\n                paths.push([]);\r\n            }\r\n            paths[paths.length - 1].push({ x, y });\r\n        }\r\n        draw();\r\n    }\r\n});\r\nfor (const elem of document.querySelectorAll('input[name=\"trig\"]')) {\r\n    const input = elem;\r\n    if (input.checked) {\r\n        triangulator = TRIANGULATORS[input.value];\r\n    }\r\n    input.addEventListener(\"change\", () => {\r\n        if (input.checked) {\r\n            triangulator = TRIANGULATORS[input.value];\r\n            draw();\r\n        }\r\n    });\r\n}\r\nconst resizeCanvas = () => {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    draw();\r\n};\r\nwindow.addEventListener(\"resize\", resizeCanvas);\r\nresizeCanvas();\r\n\n\n//# sourceURL=webpack://polygon-winding-solver/./example/src/main.ts?");

/***/ }),

/***/ "./node_modules/two-product/two-product.js":
/*!*************************************************!*\
  !*** ./node_modules/two-product/two-product.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/two-product/two-product.js?");

/***/ }),

/***/ "./node_modules/two-sum/two-sum.js":
/*!*****************************************!*\
  !*** ./node_modules/two-sum/two-sum.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}\n\n//# sourceURL=webpack://polygon-winding-solver/./node_modules/two-sum/two-sum.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./example/src/main.ts");
/******/ 	
/******/ })()
;